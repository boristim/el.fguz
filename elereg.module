<?php

/**
 * @file
 * Primary module hooks for elereg module.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_alter().
 */
function elereg_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $dtForms = ['views-exposed-form-departures-page-1', 'views-exposed-form-registrations-page-1'];
  if (($form_id == 'views_exposed_form') && (in_array($form['#id'], $dtForms))) {
    $form['#attached']['library'][] = 'elereg/elereg_admin';
    $form['dt_wrapper']['dt']['max']['#type'] = $form['dt_wrapper']['dt']['min']['#type'] = 'datetime';
    $form['dt_wrapper']['dt']['max']['#date_date_element'] = $form['dt_wrapper']['dt']['min']['#date_date_element'] = 'date';
    $form['dt_wrapper']['dt']['max']['#date_time_element'] = $form['dt_wrapper']['dt']['min']['#date_time_element'] = 'time';
    $form['dt_wrapper']['dt']['max']['#date_date_format'] = $form['dt_wrapper']['dt']['min']['#date_date_format'] = 'd.m.Y';
    $userInput = $form_state->getUserInput();
    if (!isset($userInput['dt'])) {
      $day = time();
      $curDay = intval(date('w', $day)) - 1;
      $startDate = DrupalDateTime::createFromTimestamp(strtotime('-' . $curDay . ' days', $day))->format('Y-m-d') . ' 00:00:00';
      $stopDate = DrupalDateTime::createFromTimestamp(strtotime('+' . (6 - $curDay) . ' days', $day))->format('Y-m-d') . ' 23:59:59';
      $startDate = DrupalDateTime::createFromFormat('Y-m-d H:i:s', $startDate);
      $stopDate = DrupalDateTime::createFromFormat('Y-m-d H:i:s', $stopDate);
      $form['dt_wrapper']['dt']['min']['#value']['object'] = $startDate;
      $form['dt_wrapper']['dt']['min']['#value']['date'] = $startDate->format('Y-m-d');
      $form['dt_wrapper']['dt']['min']['#value']['time'] = $startDate->format('H:i:s');
      $form['dt_wrapper']['dt']['max']['#value']['object'] = $stopDate;
      $form['dt_wrapper']['dt']['max']['#value']['date'] = $stopDate->format('Y-m-d');
      $form['dt_wrapper']['dt']['max']['#value']['time'] = $stopDate->format('H:i:s');
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function elereg_form_node_holidays_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $form['#attached']['library'][] = 'elereg/elereg_admin';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function elereg_form_node_holidays_edit_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $form['#attached']['library'][] = 'elereg/elereg_admin';
}


function elereg_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
}

/**
 * Implements hook_page_attachments().
 */
function elereg_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'elereg/elereg';
}

function elereg_form_node_mites_form_alter(&$form, FormStateInterface $formState, $form_id): void {
  unset($form['actions']['preview']);

  //  if (($mites = Drupal::entityQuery('mite')->sort('mite_reg_no','desc')->range(0,1)->execute()) && (count($regQ))) {
  //    $regNo = intval(Node::load(reset($mites))->get('mite_reg_no')->getValue());
  if (($query = Drupal::database()->query('Select max(field_mite_reg_no_value) as no from node__field_mite_reg_no')) && ($regQ = $query->fetchAssoc())) {
    $regNo = intval($query->fetchAssoc()['no']) + 1;
  }
  if ($regNo < 1000) {
    $regNo = 1001;
  }
  $regNo = sprintf('%06.0d', $regNo);
  //  $query
  //  dump($query);
  $form['field_mite_reg_no']['widget'][0]['value']['#default_value'] = $regNo;

//  dump($form);
//  $formState->set('field_mite_reg_no', $regNo);
}
